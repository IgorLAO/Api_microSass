import fs from 'node:fs'
import path from 'node:path'
// TODO matar esse aquivo e usar o PlataFS
export function tools(dirs) {
    const tools = new Object(null)

    tools.mkdirIfNotExists = async (dir) => {
        try {
            const p = path.resolve(dir)

            if (!fs.existsSync(p)) {
                fs.mkdirSync(p, { resolve: true })
            }
        } catch (err) {
            console.error(err)
            process.exit(1)
        }
    }

    tools.copyFile = async (source, destination) => {
        try {
            const s = path.resolve(source)
            const d = path.resolve(destination)

            fs.copyFileSync(s, d)
        } catch (err) {
            console.error(err)
            process.exit(1)
        }
    }

    tools.copyFileIfNotExists = async (source, destination) => {
        try {
            const s = path.resolve(source)
            const d = path.resolve(destination)

            if (!fs.existsSync(d) && fs.existsSync(s)) {
                tools.copyFile(s, d)
            }
        } catch (err) {
            console.error(err)
            process.exit(1)
        }
    }

    tools.forEachFileInFolder = async (folder, callback) => {
        try {
            const f = path.resolve(folder)
            if (!fs.existsSync(f)) {
                return
            }

            const files = fs.readdirSync(f)

            const promises = []

            files.forEach(file => {
                const filePath = path.join(f, file)

                promises.push(
                    (async () => callback(file, filePath))()
                )
            })

            await Promise.all(promises)
        } catch (err) {
            console.error(err)
            process.exit(1)
        }
    }

    tools.createFolderProject = (async (folder) => 
        tools.mkdirIfNotExists(path.join(dirs.projectDir, folder))
    )

    tools.copyFolderToProject = async (folder) => {
        const templateFolder = path.join(dirs.templateDir, folder)
        const destination = path.join(dirs.projectDir, folder)

        await tools.mkdirIfNotExists(destination)

        await tools.forEachFileInFolder(templateFolder, async (file, filePath) =>
            tools.copyFileIfNotExists(
                filePath,
                path.join(destination, file)
            )
        )
    }

    tools.syncFolderProject = async (folder) => {
        const templateFolder = path.join(dirs.templateDir, folder)
        const destination = path.join(dirs.projectDir, folder)

        await tools.mkdirIfNotExists(destination)

        await tools.forEachFileInFolder(templateFolder, async (file, filePath) =>
            tools.copyFile(
                filePath,
                path.join(destination, file)
            )
        )
    }

    tools.syncFileToProject = async (file) => {
        const templateFile = path.join(dirs.templateDir, file)
        const destination = path.join(dirs.projectDir, file)

        await tools.copyFile(templateFile, destination)
    }

    return tools
}