declare global {
    interface PlataRuntime extends PlataRuntimeEType {}
}

type PlataRuntimeEType = typeof PlataRuntimeE

type SwitchUnionObjectFunctionCases<V extends DictionaryRecord<string | number, any>, K extends keyof V> = {
    [type in V[K] | '_default']:
        type extends '_default' ? (v: V) => Promise<unknown>
        : V extends { [P in K]: type } ? (v: V) => Promise<unknown>
    : never
}

type SwitchUnionFunctionCases<V extends string | number> = {
    [T in (V | '_default')]: T extends V ?
        (v: T) => Promise<unknown>
    : (v: unknown) => Promise<unknown>
}

type SwitchUnionFunction = 
    <V extends string | number, C extends SwitchUnionFunctionCases<V>>
    (
        values: V,
        cases: C,
    ) => PlataPromise<Awaited<ReturnType<C[V | '_default']>>>
;

type SwitchUnionObjectFunction = 
    <const V extends DictionaryRecord<string, any>, K extends keyof V, C extends SwitchUnionObjectFunctionCases<V, K> = SwitchUnionObjectFunctionCases<V, K>>
    (
        object: V, 
        chave: K, 
        cases: C
    ) => PlataPromise<Awaited<ReturnType<C[V[K] | '_default']>>>
; 

export namespace PlataRuntimeE {
    export const switchUnion: SwitchUnionFunction = (value, cases) => {
        const f = cases[value] as any

        if (f === undefined)
            return cases['_default'](value as any) as any
        ;

        return f(value as any) as any
    }

    export const switchUnionObject: SwitchUnionObjectFunction = (v, chave, cases) => {
        if (v === undefined || v === null)
            return cases['_default'](v) as any
        ;
        
        const f = cases[v[chave]]

        if (f === undefined)
            return cases['_default'](v) as any
        ;

        return f(v) as any
    }
}