import glob from 'glob'
import path from 'node:path'

declare global {
    interface PlataRuntime extends PlataRuntimeEType {}
}

type PlataRuntimeEType = typeof PlataRuntimeE

export namespace PlataRuntimeE {

    export async function RequireAsync<T = any>(p: string): RequireAsyncReturn<T> {
        try {
            return {
                filePath: p,
                name: path.basename(p).replace('.ts', '').replace('.js', ''),
                exports: require(p) as T
            }
        } catch(err) {
            return {
                errorID: 'PLTRF0001',
                msg: `Error while importing file ${p}`,
                error: {
                    message: err?.toString(),
                    stack: err?.stack ?? new Error().stack
                }
            }
        }
    }

    export async function RequireFolder<T = any>(p: string): RequireFolderReturn<T> {
        const promises: PlataPromise<RequiredInterface<T>>[] = []

        glob.sync(`${p.replace(/\\/g, '/')}/**/*.+(js|ts)`)
            .filter(file => !file.endsWith('.d.ts'))
            .forEach(file => {
                file = file.replace(/(\.ts|\.js)$/, '')

                promises.push(Plata.FastPromise(() => Plata.RequireAsync(file)))
            })
        ;

        return Promise.all(promises).then(
            rs => {
                const errors: PlataError[] = []
                const result: RequiredInterface<T>[] = []

                rs.forEach(r => {
                    if (r.errorID !== undefined) {
                        errors.push(r)
                    } else {
                        result.push(r)
                    }
                })

                if (errors.length !== 0) {
                    return {
                        errorID: 'PLTRF0003',
                        msg: `Errors while importing folder: ${p}`,
                        error: errors
                    }
                }
                
                return result
            },
            err => {
                return {
                    errorID: 'PLTRF0002',
                    msg: `Error while importing folder: ${p}`,
                    error: {
                        message: err?.toString(),
                        stack: err?.stack ?? new Error().stack
                    }
                }
            }
            
        )
    }

    export async function ReadEnvFileToPromise(p: string) {
        const envFile = Object.create(null)

        if (await Plata.files.access(p.replace('__BUILD__/', ''))) {
            p = p.replace('__BUILD__/', '')
        }

        const result = await Plata.files.ReadFileAsync(p, async line => {
            if (line[0] === '#') return

            if (line !== '') {
                const env = line.split('=')

                if (env.length >= 2) {
                    const [ key, ...v ] = env
                    let value = v.join('=')

                    if (value[0] === '{' && value.slice(-1) === '}')
                        value = process.env[value.slice(1, -1)] ?? ''
                    ;

                    if (value !== '')
                        envFile[key] = value
                    ;
                }
            }
        })

        if (result !== null) {
            return result
        }

        return envFile
    }
}