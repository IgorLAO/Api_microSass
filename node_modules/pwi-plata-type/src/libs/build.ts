import path from 'node:path'
import { glob } from "glob"
import moment from 'moment'
import { PlataBuildWasm } from './build_wasm'

export namespace PlataBuild {
    export const getConfigDefault: () => Build.Config = () => ({
        env: 'prod',
        copyFolderToRoot: [],
        mapFiles: false,
        otimizar: true,
        plugins: [],
    })

    export async function getBuildConfig(): PlataPromise<Build.Config> {
        const config = await Plata.RequireAsync<{ default: unknown }>("@@/config.build")

        if (config.errorID !== undefined) {
            return PlataBuild.getConfigDefault()
        }

        const loadedConfig = await Plata.switchUnion((typeof config.exports.default) as 'function' | 'object', {
            _default: async (v) => Plata.BuildPlataError({
                errorID: 'PLGETBLCONF001',
                msg: `Tipo de config não suportada ${v}`
            }),

            function: async () => (config.exports.default as () => unknown)(),
            object: async () => config.exports.default as unknown 
        })
    
        return loadedConfig
    }

    export function getScriptsByPlataType() {
        switch (Plata.ProjectJson['plata_type']) {
            case 'api': {
                return {
                    start: 'plata-runtime --skip-recompile + plata-api'
                }
            }

            case 'cluster': {
                return {
                    start: 'plata-runtime --skip-recompile + plata-cluster'
                }
            }

            default: {
                return {}
            }
        }
    }

    export async function compile(params: Build.CompilerConfigs) {
        const tsupRequire = await Plata.RequireAsync<typeof import('tsup')>('tsup')

        if (tsupRequire.errorID !== undefined) {
            return tsupRequire
        }

        const files = [
            ...glob.sync('*/**/*.+(ts|env|json)'),
            ...glob.sync('config.build.ts'),
        ].filter(f => {
                if (f.startsWith('node_modules'))
                    return false
                ;

                if (f.startsWith('__'))
                    return false
                ;

                if (f.endsWith('.d.ts'))
                    return false
                ;

                if (params.packageJsonSetup)
                    if (f === "config.build.ts")
                        return false
                    ;
                ;

                return true
            })
        ;

        const { exports: tsup } = tsupRequire
        const outDir = path.join(params.basePath, '__BUILD__')
    
        await tsup.build({
            outDir,
            tsconfig: path.join(Plata.ProjectDir, 'tsconfig.json'),
            clean: true,
            entry: files,
            skipNodeModulesBundle: true,
            bundle: false,
            platform: 'node',
            target: 'esnext',
            minify: params.otimizar === true,
            minifyIdentifiers: params.otimizar === true,
            minifySyntax: params.otimizar === true,
            minifyWhitespace: params.otimizar === true,
            sourcemap: params.mapFiles === true,
            silent: true,
            loader: {
                '.env': 'copy',
                '.json': 'copy',
            }
        })

        console.log('✅ Codigo Compilado')

        const tools = new Plata.files.CliTools(Plata.ProjectDir, params.basePath)

        if (params.copyFolderToRoot !== undefined) {
            for (let index = 0; index < params.copyFolderToRoot.length; index++) {
                const folder = params.copyFolderToRoot[index];

                await tools.copyFolderToDest(folder)
                console.log(`✅ Pasta ${folder} copiada`)
            }
        }

        if (params.plugins?.length) {
            for (let i = 0; i < params.plugins.length; i++) {
                const plugin = params.plugins[i]

                if (plugin.posBuild !== undefined) {
                    console.log(`♻️ Rodando o plugin: ${plugin.name}`)
                    await plugin.posBuild(params, outDir)
                }
            }

            console.log(`✅ Todos os plugins rodados`)
        }

        if (params.packageJsonSetup === true) {
            await tools.createFileToDest('package.json', JSON.stringify({
                name: Plata.ProjectJson.name,
                version: moment().format('YYYYMMDD'),
                description: "",
                scripts: {
                    ...Plata.ProjectJson['my-scripts'],
                    ...PlataBuild.getScriptsByPlataType(),
                },
                keywords: [],
                author: "",
                plata_skip_recompile: true,
                plata_type: Plata.ProjectJson['plata_type'],
                plata_name: Plata.ProjectJson['plata_name'],
                plata_no_setup: true,
                plata_build_env: params.env ?? 'prod',
                dependencies: {
                    ...Plata.ProjectJson.dependencies
                }
            }, null, 4))
    
            console.log(`🚀 Compilação finalizada`)
        }

        await PlataBuildWasm.compileWasm(outDir)

        return true
    }
}