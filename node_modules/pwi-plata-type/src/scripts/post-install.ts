import { PlataFs } from '../libs/fs'
import path from 'node:path'

const main = async () => {
    const plataDir = path.resolve('.')

    if (path.basename(path.dirname(plataDir)) !== 'node_modules') return

    const templatesDir = path.resolve(plataDir, 'templates', 'postinstall')
    const projectDir = path.resolve(plataDir, '..', '..')

    // read Plata and project package.json
    let projectPackageJson: Dictionary<string | number | null | boolean | Object | undefined> = {} 
    let plataPackageJson: Dictionary<string | number | null | boolean | Object | undefined> = {}

    {
        const promises: Promise<void>[] = []

        promises.push(Promise.resolve().then( () =>
            PlataFs.fs.readFile(path.join(projectDir, 'package.json')).then(
                b => projectPackageJson = JSON.parse(b.toString()),
                err => {
                    console.error(err)
                    process.exit(1)
                }
            )
        ))

        promises.push(Promise.resolve().then(() =>
            PlataFs.fs.readFile(path.join(plataDir, 'package.json')).then(
                b => plataPackageJson = JSON.parse(b.toString()),
                err => {
                    console.error(err)
                    process.exit(1)
                }
            )
        ))

        await Promise.all(promises)
    }

    if (projectPackageJson.plata_no_setup !== undefined) {
        return
    }

    projectPackageJson.plata_type = projectPackageJson.plata_type ?? 'api'
    projectPackageJson.plata_name = plataPackageJson.name
    projectPackageJson['my-scripts'] = projectPackageJson['my-scripts'] ?? Object.create(null)

    // https://developer.mozilla.org/en-US/docs/Glossary/Deep_copy
    projectPackageJson.scripts = JSON.parse(JSON.stringify(projectPackageJson['my-scripts']))

    const templateDir = path.join(templatesDir, `${projectPackageJson.plata_type}`)

    const { install } = await import(`./post-install/${projectPackageJson.plata_type}`.replace(/\\/g, '/'))

    projectPackageJson = await install(
        new PlataFs.CliTools(templateDir, projectDir),
        projectPackageJson
    )

    await PlataFs.fs.writeFile(path.join(projectDir, 'package.json'), JSON.stringify(projectPackageJson, null, 4))
}

main()