import { describe, it, before } from "node:test"
import assert from "node:assert"
import { loadRuntimeLibs } from "../bin/runtime/_setupRuntime"


describe('PromiseAll', () => {
    const plataPromise = (async () => {
        const g = global as any

        g.Plata = await loadRuntimeLibs()
    })()

    before(async () => {
        await plataPromise
    })

    it('should resolve an array of promises', async () => {
        const promises = [
            Plata.FastPromise(async (): Promise<1> => 1),
            Plata.FastPromise(async (): Promise<2> => 2),
            Plata.FastPromise(async (): Promise<3> => 3),
        ] as const

        const result = await Plata.PromiseAll(promises)

        assert.strictEqual(result.errorID, undefined)
        
        const type: [ 1, 2, 3 ] = result
        assert.deepStrictEqual(result, [1, 2, 3])
        
    })

    it('should return an empty array if input is an empty array', async () => {
        const promises: [] = []

        const result = await Plata.PromiseAll(promises)

        assert.strictEqual(result.errorID, undefined)
    
        const type: unknown[] = result
        assert.deepStrictEqual(result, [])
    })

    it('should handle promises that reject', async () => {
        const promises = [
            Plata.FastPromise(() => Promise.resolve(1)),
            Plata.FastPromise(() => Promise.resolve(Plata.BuildPlataError({
                errorID: 'a',
                msg: '',
                error: ''
            }))),
            Plata.FastPromise(() => Promise.resolve(3)),
        ]

        const result = await Plata.PromiseAll(promises)

        if (result.errorID === undefined) {
            const type: number[] = result    
        }
        
        assert.strictEqual(result.errorID, 'a')
    })
})