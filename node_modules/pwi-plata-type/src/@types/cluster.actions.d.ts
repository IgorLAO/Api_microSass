interface PlataProcess extends Cluster.PlataEvents {}

declare namespace Cluster {
    type GetActionsObject<T extends Dictionary<any>> = {
        [K in keyof T]: { action: K, msg: T[K] }
    }

	type GetActions<T extends Dictionary<any>> = GetActionsObject<T>[keyof T]

    type GetEmitFuncionsArgs<T extends Dictionary<any>> = {
        [K in keyof T]: [event: K, response: T[K]]
    }[keyof T]

    type GetOnFuncionsArgs<T extends Dictionary<any>> = {
        [K in keyof T]: [event: K, listener: (r: T[K]) => void | Promise<void>]
    }[keyof T]


    interface PlataEvents {
        emit(...args: GetEmitFuncionsArgs<PlataClusterActions> | Cluster.UserActions)
        on(...args: GetOnFuncionsArgs<PlataClusterActions> | GetOnFuncionsArgs<UserClusterActions>)
        once(...args: GetOnFuncionsArgs<PlataClusterActions> | GetOnFuncionsArgs<UserClusterActions>)
    }

	type Actions = GetActions<PlataClusterActions> | GetActions<UserClusterActions>
    type UserActions = GetActions<UserClusterActions>
}
