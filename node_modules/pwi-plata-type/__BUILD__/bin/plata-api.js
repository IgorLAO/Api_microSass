"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.main = void 0;
const express_1 = __importDefault(require("express"));
const cluster_1 = require("++/libs/cluster");
const node_https_1 = require("node:https");
const promises_1 = __importDefault(require("node:fs/promises"));
const node_path_1 = __importDefault(require("node:path"));
const router_1 = require("++/libs/router");
const custom_1 = require("++/libs/custom");
const hot_reload_1 = require("++/libs/hot-reload");
const main = async () => {
    const cluster = new cluster_1.PlataClusterManager();
    if (cluster.isPrimary()) {
        let workers = undefined;
        if (Plata.config._PLATA_API_WORKERS !== undefined) {
            workers = +Plata.config._PLATA_API_WORKERS || undefined;
        }
        const clustersPromise = require("@@/clusters/*.*");
        if (process.argv.includes('--hot'))
            Plata.FastPromise(() => hot_reload_1.HotReload.setupHotReloadPrimary());
        const clusters = await clustersPromise;
        if (clusters.errorID !== undefined) {
            console.log(clusters);
            process.exit(0);
        }
        {
            const promises = [];
            clusters.forEach(c => {
                const config = c.exports.default;
                promises.push(cluster._startCluster(config).then(r => {
                    if (r !== null) {
                        console.log(r);
                        process.exit(0);
                    }
                }));
            });
            await Promise.all(promises);
        }
        await cluster._startCluster({
            name: '__PLATA_EXPRESS__',
            env: Plata.config.ENV ?? 'prod',
            onStart: async () => { },
            workers: workers,
        });
    }
    else {
        if (Plata.config._PLATA_WORKER_NAME === '__PLATA_EXPRESS__') {
            if (process.argv.includes('--hot'))
                Plata.FastPromise(() => hot_reload_1.HotReload.setupHotReloadWorker());
            const projectRoutesPromise = Plata.FastPromise(() => (0, router_1.loadRoutesFromProject)());
            const app = await (0, custom_1.getCustomExpress)();
            app.disable('x-powered-by');
            const apiRoots = Plata.config._PLATA_API_ROOT ?? '/api';
            app.use(express_1.default.json({ limit: Plata.config._PLATA_API_JSON_SIZE ?? '100kb' }));
            const requiredRoutes = await projectRoutesPromise;
            if (requiredRoutes.errorID !== undefined) {
                console.log(requiredRoutes);
                await cluster.send({
                    action: 'KILL',
                    msg: 'Erro enquanto carregava as rotas'
                });
                return;
            }
            {
                const result = await (0, router_1.buildExpressRouter)(requiredRoutes);
                if (result.errorID !== undefined) {
                    console.log(result);
                    await cluster.send({
                        action: 'KILL',
                        msg: 'Erro enquanto carregava as rotas'
                    });
                    return;
                }
                app.use(apiRoots.split(','), result);
            }
            app.use((err, _req, res, _next) => {
                return res.status(500).json({
                    errorID: 'PRAPI0001',
                    error: 'Erro interno inesperado',
                    msg: {
                        message: err.message,
                        stack: err.stack ?? new Error().stack
                    }
                });
            });
            app.all('*', (req, res) => {
                return res.status(404).json({
                    errorID: 'PRAPI0002',
                    msg: 'Rota nÃ£o encontrada',
                    error: req.path
                });
            });
            const port = process.env.PORT ?? 3050;
            if (!Plata.config._PLATA_API_SSL_KEY || !Plata.config._PLATA_API_SSL_CERT) {
                console.log(`Nenhum certificado configurado na env ${process.env.ENV}:`);
                console.log(`_PLATA_API_SSL_KEY: ${process.env._PLATA_API_SSL_KEY}`);
                console.log(`_PLATA_API_SSL_CERT: ${process.env._PLATA_API_SSL_CERT}`);
                app.listen(port, () => {
                    console.log(`Iniciando Worker Express na porta ${port}`);
                    setTimeout(() => process.removeAllListeners('exit'), 500);
                });
            }
            else {
                console.log('Iniciando a Plata com ssl usando os arquivos:');
                console.log(`key: ${process.env._PLATA_API_SSL_KEY}`);
                console.log(`cert: ${process.env._PLATA_API_SSL_CERT}`);
                const [cert, key] = await Promise.all([
                    promises_1.default.readFile(node_path_1.default.normalize(node_path_1.default.join(Plata.ProjectDir, Plata.config._PLATA_API_SSL_CERT))),
                    promises_1.default.readFile(node_path_1.default.normalize(node_path_1.default.join(Plata.ProjectDir, Plata.config._PLATA_API_SSL_KEY)))
                ]).catch(err => {
                    console.log({
                        errorID: 'PRAPI0003',
                        msg: 'Erro ao ler o certifica e chave ssl',
                        error: {
                            message: err?.toString(),
                            stack: err?.stack
                        }
                    });
                    process.exit(1);
                });
                const https = (0, node_https_1.createServer)({
                    cert,
                    key,
                    passphrase: process.env._PLATA_API_SSL_PASS
                }, app);
                https.listen(port, () => {
                    console.log(`Iniciando Worker Express na porta ${port} com SSL`);
                    setTimeout(() => process.removeAllListeners('exit'), 500);
                });
            }
        }
        else {
            if (Plata.config._PLATA_WORKER_NAME === undefined) {
                await cluster.send({
                    action: 'KILL',
                    msg: 'tried to start a Worker without _PLATA_WORKER_NAME'
                });
                return;
            }
            await cluster._onStartCluster(Plata.config._PLATA_WORKER_NAME, Plata.config._PLATA_WORKER_TYPE);
        }
    }
};
exports.main = main;
//# sourceMappingURL=plata-api.js.map