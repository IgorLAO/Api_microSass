"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.main = void 0;
exports.dumpRoutes = dumpRoutes;
exports.toProjectSwagger = toProjectSwagger;
const node_path_1 = __importDefault(require("node:path"));
const node_fs_1 = __importDefault(require("node:fs"));
const router_1 = require("++/libs/router");
async function dumpRoutes() {
    const requiredRoutes = await (0, router_1.loadRoutesFromProject)();
    if (requiredRoutes.errorID !== undefined) {
        console.log(requiredRoutes);
        process.exit(1);
    }
    const router = await (0, router_1.buildExpressRouter)(requiredRoutes);
    if (router.errorID !== undefined) {
        console.log(router);
        process.exit(1);
    }
    const dumpedRoutes = [];
    const regex = /:(.*?)\??\//g;
    for (const r of router.routes) {
        if (r.swaggerHide) {
            continue;
        }
        r.path = node_path_1.default.normalize(`${r.path ?? '/'}/`).replace(/\\/g, '/');
        const dumpedRouteParams = [];
        const urlParms = r.path.match(regex) ?? [];
        for (const p of urlParms) {
            dumpedRouteParams.push({
                name: p.replace(regex, '$1'),
                required: p[p.length - 2] !== '?',
                in: 'path',
                type: 'string'
            });
        }
        dumpedRoutes.push({
            httpRoute: r.path.replace(regex, '{$1}/'),
            method: r.method,
            params: dumpedRouteParams,
        });
    }
    return dumpedRoutes;
}
async function toProjectSwagger(file, content) {
    try {
        const p = node_path_1.default.resolve(Plata.ProjectDir, 'swagger', file);
        if (!node_fs_1.default.existsSync(p)) {
            node_fs_1.default.mkdirSync(node_path_1.default.dirname(p), { recursive: true });
            node_fs_1.default.writeFileSync(p, JSON.stringify(content, null, 4));
        }
    }
    catch (e) {
        console.log(e);
        process.exit(1);
    }
}
const main = async () => {
    const routes = await dumpRoutes();
    const templateFolder = node_path_1.default.join(Plata.PlataDir, 'templates', 'swagger-cli');
    const files = {
        swaggerHeader: require(node_path_1.default.join(templateFolder, 'header.json')),
        route: {
            header: require(node_path_1.default.join(templateFolder, 'route', 'header.json')),
            body: require(node_path_1.default.join(templateFolder, 'route', 'body.json')),
            response: require(node_path_1.default.join(templateFolder, 'route', 'response.json')),
        }
    };
    for (const route of routes) {
        const fileCopy = JSON.parse(JSON.stringify(files));
        for (const json in fileCopy.route) {
            await toProjectSwagger(node_path_1.default.join('routes', route.httpRoute, route.method.toLowerCase(), `${json}.json`), fileCopy.route[json]);
        }
    }
    await toProjectSwagger('header.json', files.swaggerHeader);
    console.log('Done');
};
exports.main = main;
//# sourceMappingURL=plata-swagger.js.map