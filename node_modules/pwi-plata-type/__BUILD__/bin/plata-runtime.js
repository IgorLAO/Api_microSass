#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_path_1 = __importDefault(require("node:path"));
const node_assert_1 = require("node:assert");
const node_cluster_1 = __importDefault(require("node:cluster"));
const _setupRuntime_1 = require("./runtime/_setupRuntime");
const fs_1 = require("../libs/fs");
const env_1 = require("../libs/env");
const build_1 = require("../libs/build");
const build_wasm_1 = require("../libs/build_wasm");
async function compile() {
    if (!node_cluster_1.default.isPrimary)
        return;
    await build_1.PlataBuild.compile({
        basePath: Plata.ProjectDir,
        mapFiles: true,
        packageJsonSetup: false,
        otimizar: false,
    });
}
const shouldCompile = async () => {
    if (process.argv.findIndex(p => p === '--skip-recompile') !== -1 || Plata.ProjectJson['plata_skip_recompile'] !== undefined)
        return Plata.files.access(node_path_1.default.join(Plata.ProjectDir, '__BUILD__')).then(r => !r);
    return true;
};
const main = async () => {
    const g = global;
    g.Plata = await (0, _setupRuntime_1.loadRuntimeLibs)();
    g.Plata.files = fs_1.PlataFs;
    if (await shouldCompile())
        await compile();
    module.constructor.prototype.require = function (pathRequire) {
        const self = this;
        (0, node_assert_1.ok)(typeof pathRequire === 'string', 'path must be a string');
        (0, node_assert_1.ok)(pathRequire, 'missing path');
        try {
            switch (pathRequire.slice(0, 2)) {
                case '@@':
                    pathRequire = pathRequire.replace('@@', `${Plata.ProjectDir}/__BUILD__`);
                    break;
                case '++':
                    pathRequire = pathRequire.replace('++', `${Plata.PlataDir}/__BUILD__`);
                    break;
            }
            pathRequire = pathRequire.replace(/\\/g, '/');
            switch (node_path_1.default.extname(pathRequire)) {
                case '.env':
                    return Plata.FastPromise(() => Plata.ReadEnvFileToPromise(pathRequire));
                    break;
                case '.*':
                    return Plata.FastPromise(() => Plata.RequireFolder(node_path_1.default.dirname(pathRequire)));
                    break;
                default:
                    return self.constructor._load(pathRequire, self);
                    break;
            }
        }
        catch (err) {
            if (err.code === 'MODULE_NOT_FOUND') {
                throw err;
            }
            pathRequire = node_path_1.default.resolve(__dirname, pathRequire);
            console.log('Error in file: ' + pathRequire);
        }
    };
    g.Plata.config = process.env;
    const envFile = await env_1.PlataEnvLoader.load();
    if (envFile.errorID !== undefined) {
        console.log(envFile);
        process.exit(1);
    }
    for (const key in envFile) {
        g.Plata.config[key] = envFile[key];
    }
    await build_wasm_1.PlataBuildWasm.loadFilesWasm();
    const run = process.argv[process.argv.indexOf('+') + 1];
    const app = require(`++/bin/${run}`);
    await app.main();
};
main();
//# sourceMappingURL=plata-runtime.js.map