"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.tools = void 0;
const node_fs_1 = __importDefault(require("node:fs"));
const node_path_1 = __importDefault(require("node:path"));
const tools_1 = require("../../libs/tools");
var tools;
(function (tools) {
    let files;
    (function (files) {
        async function mkdirIfNotExists(dir) {
            try {
                const p = node_path_1.default.resolve(dir);
                if (!node_fs_1.default.existsSync(p)) {
                    node_fs_1.default.mkdirSync(p, { recursive: true });
                }
            }
            catch (err) {
                console.error(err);
                process.exit(1);
            }
        }
        files.mkdirIfNotExists = mkdirIfNotExists;
        async function copyFileIfNotExists(source, destination) {
            try {
                const s = node_path_1.default.resolve(source);
                const d = node_path_1.default.resolve(destination);
                if (!node_fs_1.default.existsSync(d)) {
                    node_fs_1.default.copyFileSync(s, d);
                }
            }
            catch (err) {
                console.error(err);
                process.exit(1);
            }
        }
        files.copyFileIfNotExists = copyFileIfNotExists;
        async function copyFileToProject(projectFolder, templateFile, fileName) {
            const s = node_path_1.default.resolve(tools_1.PlataDirs.getPlataTempleteDir('create-cli', `${templateFile}.ts`));
            let d = node_path_1.default.resolve(Plata.ProjectDir, projectFolder);
            await mkdirIfNotExists(d);
            d = node_path_1.default.join(d, fileName);
            await copyFileIfNotExists(s, d);
            return d;
        }
        files.copyFileToProject = copyFileToProject;
        async function deployFileToProject(projectFolder, templateFile, fileName, args) {
            const fileInProject = await copyFileToProject(projectFolder, templateFile, fileName);
            const content = await tools_1.PlataFiles.readFileSync(fileInProject, (line) => {
                if (line === '//@ts-nocheck') {
                    return '';
                }
                if (line === '') {
                    return '';
                }
                let lastIndex = 0;
                while (lastIndex !== -1) {
                    lastIndex = line.indexOf('$__', lastIndex);
                    if (lastIndex !== -1) {
                        const pIndex = line.indexOf('__$', lastIndex);
                        const param = line.slice(lastIndex + 3, pIndex);
                        line = line.replace(new RegExp(`\\$__${param}__\\$`, 'g'), args[param]);
                    }
                }
                return line;
            });
            if (content.err !== undefined) {
                console.log(content.err);
                process.exit(1);
            }
            else {
                node_fs_1.default.writeFileSync(fileInProject, content);
            }
        }
        files.deployFileToProject = deployFileToProject;
    })(files = tools.files || (tools.files = {}));
    let args;
    (function (args_1) {
        async function forEachArg(callback) {
            let args = process.argv.slice(process.argv.indexOf('--') + 1);
            while (args.length !== 0) {
                const command = args.shift();
                if (command !== undefined) {
                    args = await callback(command, args);
                }
            }
        }
        args_1.forEachArg = forEachArg;
    })(args = tools.args || (tools.args = {}));
})(tools || (exports.tools = tools = {}));
//# sourceMappingURL=plata-create-tools.js.map