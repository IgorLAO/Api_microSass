"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cli = void 0;
const plata_create_tools_1 = require("./plata-create-tools");
const commander_1 = require("commander");
const node_path_1 = __importDefault(require("node:path"));
const program = new commander_1.Command();
program.name('Plata Create cli');
program.description('CLI usada para criar rotas, libs, models e muito mais na plata');
program.version(Plata.PlataJson.version);
program.command('lib <libs...>')
    .description('Cria uma lib utilizando o templete da plata')
    .action(async (libs) => {
    if (!Array.isArray(libs)) {
        return;
    }
    const promises = [];
    for (const lib of libs) {
        promises.push(plata_create_tools_1.tools.files.deployFileToProject('libs', 'lib', `${lib}.ts`.toLowerCase(), { Name: `${lib}`, name: `${lib}`.toLowerCase() }).finally(() => console.log(`Config ${lib} criada`)));
    }
    await Promise.all(promises);
});
program.command('class <classes...>')
    .description('Cria uma config com e uma clase utilizando o templete da plata')
    .action(async (clazzs) => {
    if (!Array.isArray(clazzs)) {
        return;
    }
    const promises = [];
    for (const lib of clazzs) {
        promises.push(plata_create_tools_1.tools.files.deployFileToProject('configs', 'config', `${lib}.ts`.toLowerCase(), { Name: `${lib}`, name: `${lib}`.toLowerCase() }).finally(() => console.log(`Config ${lib} criada`)));
        promises.push(plata_create_tools_1.tools.files.deployFileToProject('libs', 'class', `${lib}.ts`.toLowerCase(), { Name: `${lib}`, name: `${lib}`.toLowerCase() }).finally(() => console.log(`Classe ${lib} criada`)));
    }
    await Promise.all(promises);
});
program.command('config <configs...>')
    .description('Cria uma config utilizando o templete da plata')
    .action(async (configs) => {
    if (!Array.isArray(configs)) {
        return;
    }
    const promises = [];
    for (const config of configs) {
        promises.push(plata_create_tools_1.tools.files.deployFileToProject('configs', 'config', `${config}.ts`.toLowerCase(), { Name: `${config}`, name: `${config}`.toLowerCase() }).finally(() => console.log(`Config ${config} criada`)));
    }
    await Promise.all(promises);
});
program.command('model <models...>')
    .description('Cria um model utilizando o templete da plata')
    .action(async (models) => {
    if (!Array.isArray(models)) {
        return;
    }
    const promises = [];
    const plataName = Plata.ProjectJson.plata_name;
    for (const model of models) {
        promises.push(plata_create_tools_1.tools.files.deployFileToProject('models', 'model', `${model}.ts`.toLowerCase(), { Name: `${model}`, PlataName: `${plataName}` }).finally(() => console.log(`Model ${model} criada`)));
    }
    await Promise.all(promises);
});
program.command('cluster <clusters...>')
    .description('Cria o arquivo do worker utilizando o templete da plata')
    .action(async (clusters) => {
    if (!Array.isArray(clusters))
        return;
    const promises = [];
    const plataName = Plata.ProjectJson.plata_name;
    for (const cluster of clusters) {
        promises.push(plata_create_tools_1.tools.files.deployFileToProject('clusters', 'cluster', `${cluster}.ts`.toLowerCase(), { Name: `${cluster}`, name: `${cluster}`.toLowerCase(), PlataName: `${plataName}` }).finally(() => console.log(`Worker ${cluster} criada`)));
    }
});
program.command('cmd <cmds...>')
    .description('Cria o arquivo de um comando cmd')
    .action(async (cmds) => {
    if (!Array.isArray(cmds))
        return;
    for (const cmd of cmds) {
        await plata_create_tools_1.tools.files.deployFileToProject('cmds', 'cmd', `${cmd}.ts`.toLowerCase(), {}).finally(() => console.log(`Cmd ${cmd} criado`));
        Plata.ProjectJson['my-scripts'] = Plata.ProjectJson['my-scripts'] ?? Object.create(null);
        if (Plata.ProjectJson['my-scripts'][`cmd:${cmd}`] === undefined) {
            Plata.ProjectJson['my-scripts'][`cmd:${cmd}`] = `plata-runtime + plata-cmd ${cmd}`;
        }
        Plata.ProjectJson.scripts = JSON.parse(JSON.stringify({
            ...Plata.ProjectJson['my-scripts'],
            ...Plata.ProjectJson.scripts,
        }));
        await Plata.files.fs
            .writeFile(node_path_1.default.join(Plata.ProjectDir, 'package.json'), JSON.stringify(Plata.ProjectJson, null, 4));
    }
});
exports.cli = program;
//# sourceMappingURL=create-cluster-cli.js.map