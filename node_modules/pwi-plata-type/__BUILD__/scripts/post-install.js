"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("../libs/fs");
const node_path_1 = __importDefault(require("node:path"));
const main = async () => {
    const plataDir = node_path_1.default.resolve('.');
    if (node_path_1.default.basename(node_path_1.default.dirname(plataDir)) !== 'node_modules')
        return;
    const templatesDir = node_path_1.default.resolve(plataDir, 'templates', 'postinstall');
    const projectDir = node_path_1.default.resolve(plataDir, '..', '..');
    let projectPackageJson = {};
    let plataPackageJson = {};
    {
        const promises = [];
        promises.push(Promise.resolve().then(() => fs_1.PlataFs.fs.readFile(node_path_1.default.join(projectDir, 'package.json')).then(b => projectPackageJson = JSON.parse(b.toString()), err => {
            console.error(err);
            process.exit(1);
        })));
        promises.push(Promise.resolve().then(() => fs_1.PlataFs.fs.readFile(node_path_1.default.join(plataDir, 'package.json')).then(b => plataPackageJson = JSON.parse(b.toString()), err => {
            console.error(err);
            process.exit(1);
        })));
        await Promise.all(promises);
    }
    if (projectPackageJson.plata_no_setup !== undefined) {
        return;
    }
    projectPackageJson.plata_type = projectPackageJson.plata_type ?? 'api';
    projectPackageJson.plata_name = plataPackageJson.name;
    projectPackageJson['my-scripts'] = projectPackageJson['my-scripts'] ?? Object.create(null);
    projectPackageJson.scripts = JSON.parse(JSON.stringify(projectPackageJson['my-scripts']));
    const templateDir = node_path_1.default.join(templatesDir, `${projectPackageJson.plata_type}`);
    const { install } = await Promise.resolve(`${`./post-install/${projectPackageJson.plata_type}`.replace(/\\/g, '/')}`).then(s => __importStar(require(s)));
    projectPackageJson = await install(new fs_1.PlataFs.CliTools(templateDir, projectDir), projectPackageJson);
    await fs_1.PlataFs.fs.writeFile(node_path_1.default.join(projectDir, 'package.json'), JSON.stringify(projectPackageJson, null, 4));
};
main();
//# sourceMappingURL=post-install.js.map