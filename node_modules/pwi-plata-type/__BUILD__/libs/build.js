"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlataBuild = void 0;
const node_path_1 = __importDefault(require("node:path"));
const glob_1 = require("glob");
const moment_1 = __importDefault(require("moment"));
const build_wasm_1 = require("./build_wasm");
var PlataBuild;
(function (PlataBuild) {
    PlataBuild.getConfigDefault = () => ({
        env: 'prod',
        copyFolderToRoot: [],
        mapFiles: false,
        otimizar: true,
        plugins: [],
    });
    async function getBuildConfig() {
        const config = await Plata.RequireAsync("@@/config.build");
        if (config.errorID !== undefined) {
            return PlataBuild.getConfigDefault();
        }
        const loadedConfig = await Plata.switchUnion((typeof config.exports.default), {
            _default: async (v) => Plata.BuildPlataError({
                errorID: 'PLGETBLCONF001',
                msg: `Tipo de config não suportada ${v}`
            }),
            function: async () => config.exports.default(),
            object: async () => config.exports.default
        });
        return loadedConfig;
    }
    PlataBuild.getBuildConfig = getBuildConfig;
    function getScriptsByPlataType() {
        switch (Plata.ProjectJson['plata_type']) {
            case 'api': {
                return {
                    start: 'plata-runtime --skip-recompile + plata-api'
                };
            }
            case 'cluster': {
                return {
                    start: 'plata-runtime --skip-recompile + plata-cluster'
                };
            }
            default: {
                return {};
            }
        }
    }
    PlataBuild.getScriptsByPlataType = getScriptsByPlataType;
    async function compile(params) {
        const tsupRequire = await Plata.RequireAsync('tsup');
        if (tsupRequire.errorID !== undefined) {
            return tsupRequire;
        }
        const files = [
            ...glob_1.glob.sync('*/**/*.+(ts|env|json)'),
            ...glob_1.glob.sync('config.build.ts'),
        ].filter(f => {
            if (f.startsWith('node_modules'))
                return false;
            if (f.startsWith('__'))
                return false;
            if (f.endsWith('.d.ts'))
                return false;
            if (params.packageJsonSetup)
                if (f === "config.build.ts")
                    return false;
            ;
            return true;
        });
        const { exports: tsup } = tsupRequire;
        const outDir = node_path_1.default.join(params.basePath, '__BUILD__');
        await tsup.build({
            outDir,
            tsconfig: node_path_1.default.join(Plata.ProjectDir, 'tsconfig.json'),
            clean: true,
            entry: files,
            skipNodeModulesBundle: true,
            bundle: false,
            platform: 'node',
            target: 'esnext',
            minify: params.otimizar === true,
            minifyIdentifiers: params.otimizar === true,
            minifySyntax: params.otimizar === true,
            minifyWhitespace: params.otimizar === true,
            sourcemap: params.mapFiles === true,
            silent: true,
            loader: {
                '.env': 'copy',
                '.json': 'copy',
            }
        });
        console.log('✅ Codigo Compilado');
        const tools = new Plata.files.CliTools(Plata.ProjectDir, params.basePath);
        if (params.copyFolderToRoot !== undefined) {
            for (let index = 0; index < params.copyFolderToRoot.length; index++) {
                const folder = params.copyFolderToRoot[index];
                await tools.copyFolderToDest(folder);
                console.log(`✅ Pasta ${folder} copiada`);
            }
        }
        if (params.plugins?.length) {
            for (let i = 0; i < params.plugins.length; i++) {
                const plugin = params.plugins[i];
                if (plugin.posBuild !== undefined) {
                    console.log(`♻️ Rodando o plugin: ${plugin.name}`);
                    await plugin.posBuild(params, outDir);
                }
            }
            console.log(`✅ Todos os plugins rodados`);
        }
        if (params.packageJsonSetup === true) {
            await tools.createFileToDest('package.json', JSON.stringify({
                name: Plata.ProjectJson.name,
                version: (0, moment_1.default)().format('YYYYMMDD'),
                description: "",
                scripts: {
                    ...Plata.ProjectJson['my-scripts'],
                    ...PlataBuild.getScriptsByPlataType(),
                },
                keywords: [],
                author: "",
                plata_skip_recompile: true,
                plata_type: Plata.ProjectJson['plata_type'],
                plata_name: Plata.ProjectJson['plata_name'],
                plata_no_setup: true,
                plata_build_env: params.env ?? 'prod',
                dependencies: {
                    ...Plata.ProjectJson.dependencies
                }
            }, null, 4));
            console.log(`🚀 Compilação finalizada`);
        }
        await build_wasm_1.PlataBuildWasm.compileWasm(outDir);
        return true;
    }
    PlataBuild.compile = compile;
})(PlataBuild || (exports.PlataBuild = PlataBuild = {}));
//# sourceMappingURL=build.js.map