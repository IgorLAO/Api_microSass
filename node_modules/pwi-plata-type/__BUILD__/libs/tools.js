"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlataExtra = exports.PlataRequire = exports.PlataFiles = exports.PlataDirs = void 0;
const node_path_1 = __importDefault(require("node:path"));
const node_fs_1 = __importDefault(require("node:fs"));
const node_readline_1 = __importDefault(require("node:readline"));
const tGlob = __importStar(require("glob"));
const glob = tGlob.default;
var PlataDirs;
(function (PlataDirs) {
    function getProjectDir() {
        return node_path_1.default.resolve('.');
    }
    PlataDirs.getProjectDir = getProjectDir;
    function getProjectDirTasks() {
        return node_path_1.default.resolve('.', 'tasks');
    }
    PlataDirs.getProjectDirTasks = getProjectDirTasks;
    function getProjectDirSwagger() {
        return node_path_1.default.resolve('.', 'swagger');
    }
    PlataDirs.getProjectDirSwagger = getProjectDirSwagger;
    function getProjectDirSwaggerRotas() {
        return node_path_1.default.resolve('.', 'swagger', 'rotas');
    }
    PlataDirs.getProjectDirSwaggerRotas = getProjectDirSwaggerRotas;
    function getProjectDirClusters() {
        return node_path_1.default.resolve('.', 'clusters');
    }
    PlataDirs.getProjectDirClusters = getProjectDirClusters;
    function getProjectDirConfig() {
        return node_path_1.default.resolve('.', 'configs');
    }
    PlataDirs.getProjectDirConfig = getProjectDirConfig;
    function getProjectConfigFileDir(file) {
        return node_path_1.default.resolve('.', 'configs', file).replace(/\\/g, '/');
    }
    PlataDirs.getProjectConfigFileDir = getProjectConfigFileDir;
    function getProjectDirEnvs() {
        return node_path_1.default.resolve('.', 'envs');
    }
    PlataDirs.getProjectDirEnvs = getProjectDirEnvs;
    function getProjectEnvFileDir(file) {
        return node_path_1.default.resolve('.', 'envs', file);
    }
    PlataDirs.getProjectEnvFileDir = getProjectEnvFileDir;
    function getProjectRoutesDir() {
        return node_path_1.default.resolve('.', 'routes');
    }
    PlataDirs.getProjectRoutesDir = getProjectRoutesDir;
    function getPlataTempletesDir() {
        return node_path_1.default.join(Plata.PlataDir, 'templates');
    }
    PlataDirs.getPlataTempletesDir = getPlataTempletesDir;
    function getPlataTempleteDir(group, ...template) {
        return node_path_1.default.join(getPlataTempletesDir(), group, ...template);
    }
    PlataDirs.getPlataTempleteDir = getPlataTempleteDir;
    function getPlataBinExtraFile(file) {
        return `${node_path_1.default.join(Plata.ProjectJson, 'bin', 'extras', file)}`.replace(/\\/g, '/');
    }
    PlataDirs.getPlataBinExtraFile = getPlataBinExtraFile;
})(PlataDirs || (exports.PlataDirs = PlataDirs = {}));
var PlataFiles;
(function (PlataFiles) {
    function readFileAsync(file, callback) {
        return new Promise(resolve => {
            try {
                const promises = [];
                const stream = node_readline_1.default.createInterface({
                    input: node_fs_1.default.createReadStream(file),
                    crlfDelay: Infinity
                });
                stream.on('close', () => {
                    Promise.all(promises).then(() => resolve(null), (err) => resolve(err));
                });
                stream.on('line', (line) => {
                    promises.push(callback(line));
                });
            }
            catch (e) {
                resolve(e);
            }
        });
    }
    PlataFiles.readFileAsync = readFileAsync;
    function readFileSync(file, callback) {
        return new Promise(resolve => {
            try {
                const content = [];
                const stream = node_readline_1.default.createInterface({
                    input: node_fs_1.default.createReadStream(file),
                    crlfDelay: Infinity
                });
                stream.on('close', () => {
                    resolve(content.join('\n'));
                });
                stream.on('line', (line) => {
                    content.push(callback(line));
                });
            }
            catch (e) {
                resolve({ err: e });
            }
        });
    }
    PlataFiles.readFileSync = readFileSync;
    async function findFile(folders, file) {
        for (const folder of folders) {
            const f = glob.sync(`${folder.replace(/\\/g, '/')}/**/${file.toLowerCase()}*`)[0];
            if (f !== undefined) {
                return f;
            }
        }
        return null;
    }
    PlataFiles.findFile = findFile;
    async function findFiles(folders, file) {
        const files = [];
        for (const folder of folders) {
            files.push(...glob.sync(`${folder.replace(/\\/g, '/')}/**/${file}`));
        }
        return files;
    }
    PlataFiles.findFiles = findFiles;
    async function createFileIfNotExists(filePath, content) {
        const p = node_path_1.default.resolve(filePath);
        if (!node_fs_1.default.existsSync(p)) {
            return createFile(filePath, content);
        }
        return p;
    }
    PlataFiles.createFileIfNotExists = createFileIfNotExists;
    async function createFile(filePath, content) {
        try {
            const p = node_path_1.default.resolve(filePath);
            node_fs_1.default.mkdirSync(node_path_1.default.dirname(p), { recursive: true });
            node_fs_1.default.writeFileSync(p, content);
            return p;
        }
        catch (e) {
            return {
                errorID: 'PLTPF0001',
                msg: `Erro ao criar ao criar o arquivo ${filePath}`,
                error: e
            };
        }
    }
    PlataFiles.createFile = createFile;
    function readJsonSync(filePath) {
        return JSON.parse(node_fs_1.default.readFileSync(filePath).toString());
    }
    PlataFiles.readJsonSync = readJsonSync;
})(PlataFiles || (exports.PlataFiles = PlataFiles = {}));
var PlataRequire;
(function (PlataRequire) {
    async function requireAsync(file) {
        const p = node_path_1.default.resolve(file);
        const e = await Promise.resolve(`${p.replace(/\\/g, '/')}`).then(s => __importStar(require(s))).catch(e => { return { _plataError: e }; });
        if (e._plataError !== undefined) {
            return {
                errorID: 'PLTRF0001',
                msg: `Erro ao importar o arquivo ${file}`,
                error: e._plataError
            };
        }
        return {
            filePath: p,
            name: node_path_1.default.basename(p).replace('.ts', '').replace('.js', ''),
            exports: e.default
        };
    }
    PlataRequire.requireAsync = requireAsync;
    async function requireFolderAsync(folder) {
        const promises = [];
        const p = node_path_1.default.resolve(folder);
        glob.sync(`${p.replace(/\\/g, '/')}/**/*.+(js|ts)`)
            .filter(file => !file.endsWith('.d.ts'))
            .forEach(file => {
            file = file.replace(/\.ts|\.js$/, '');
            promises.push(requireAsync(file));
        });
        return Promise.all(promises).catch(e => {
            return {
                errorID: 'PLTRF0002',
                msg: `Erro ao importar a pasta ${folder}`,
                error: e
            };
        });
    }
    PlataRequire.requireFolderAsync = requireFolderAsync;
})(PlataRequire || (exports.PlataRequire = PlataRequire = {}));
var PlataExtra;
(function (PlataExtra) {
    function sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
    PlataExtra.sleep = sleep;
})(PlataExtra || (exports.PlataExtra = PlataExtra = {}));
//# sourceMappingURL=tools.js.map