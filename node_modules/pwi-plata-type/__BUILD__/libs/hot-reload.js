"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HotReload = void 0;
const node_watch_1 = __importDefault(require("node-watch"));
const __1 = require("..");
const build_1 = require("./build");
var HotReload;
(function (HotReload) {
    function canReload(filename) {
        if (filename.includes('__BUILD__'))
            return false;
        if (filename.includes('__RELEASE__'))
            return false;
        if (filename.includes('node_modules'))
            return false;
        if (Plata.ProjectJson['ignore-hot'])
            for (let i = 0; i < Plata.ProjectJson['ignore-hot'].length; i++) {
                const ignore = Plata.ProjectJson['ignore-hot'][i];
                if (filename.includes(ignore))
                    return false;
            }
        ;
        return /(ts|env|json)$/.test(filename);
    }
    HotReload.canReload = canReload;
    async function realod() {
        await build_1.PlataBuild.compile({
            basePath: Plata.ProjectDir,
            mapFiles: true,
            packageJsonSetup: false,
            otimizar: false,
        });
        const cluster = new __1.PlataCluster.PlataClusterManager();
        cluster._sendMsgToAllWorkers({
            action: 'RELOAD',
            msg: true
        });
    }
    HotReload.realod = realod;
    async function setupHotReloadPrimary() {
        console.log('ðŸ”¥ Hot Realod ativo');
        (0, node_watch_1.default)(Plata.ProjectDir, {
            recursive: true,
            delay: 500,
            filter: HotReload.canReload
        }, HotReload.realod);
    }
    HotReload.setupHotReloadPrimary = setupHotReloadPrimary;
    async function setupHotReloadWorker() {
        process.on('message', (msg) => {
            if (msg.action === 'RELOAD')
                process.exit(0);
        });
    }
    HotReload.setupHotReloadWorker = setupHotReloadWorker;
})(HotReload || (exports.HotReload = HotReload = {}));
//# sourceMappingURL=hot-reload.js.map