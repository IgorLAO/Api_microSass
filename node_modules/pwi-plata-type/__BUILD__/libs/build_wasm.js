"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlataBuildWasm = void 0;
const node_path_1 = __importDefault(require("node:path"));
const node_child_process_1 = require("node:child_process");
var PlataBuildWasm;
(function (PlataBuildWasm) {
    async function compileWasm(outDir) {
        const wasmPath = node_path_1.default.join(Plata.ProjectDir, 'wasm');
        const hasGoWasmModule = await Plata.files.access(wasmPath);
        if (hasGoWasmModule !== true) {
            return true;
        }
        console.log('‚ö†Ô∏è - Modulos WASM foram identificados');
        console.log('‚ö†Ô∏è - Esse funcionalidade √© experimental! e s√≥ suporta Golang');
        const modules = await PlataBuildWasm.listWasmModules(wasmPath, true);
        for (let i = 0; i < modules.length; i++) {
            await buildGoWasmModule(node_path_1.default.join(wasmPath, modules[i]), modules[i], outDir);
        }
        console.log('‚úÖ - Modulos buildados!');
    }
    PlataBuildWasm.compileWasm = compileWasm;
    async function listWasmModules(wasmPath, log) {
        const wasmFolderContent = await Plata.files.fs.readdir(wasmPath, { withFileTypes: true }).catch((err) => err.toString());
        if (typeof wasmFolderContent === 'string') {
            console.log(wasmFolderContent);
            process.exit(1);
        }
        const modules = wasmFolderContent
            .filter(w => w.isDirectory()).map(w => w.name);
        if (log) {
            console.log('üí° - Modulos encontrados: ', modules.join(','));
        }
        return modules;
    }
    PlataBuildWasm.listWasmModules = listWasmModules;
    async function listWasmFiles(wasmPath) {
        const wasmFolderContent = await Plata.files.fs.readdir(wasmPath, { withFileTypes: true }).catch((err) => err.toString());
        if (typeof wasmFolderContent === 'string') {
            console.log(wasmFolderContent);
            process.exit(1);
        }
        const files = wasmFolderContent
            .filter(w => w.isFile() && w.name.endsWith('.wasm')).map(w => w.name);
        return files;
    }
    PlataBuildWasm.listWasmFiles = listWasmFiles;
    async function buildGoWasmModule(wasmModulePath, name, outDir) {
        console.log('üî® - Buildando WASM GO ', name);
        const wasmFileName = `go.main.${name}.wasm`;
        const wasmPath = node_path_1.default.resolve(outDir, 'wasm', wasmFileName);
        (0, node_child_process_1.execSync)(`go build -trimpath -o ${wasmPath}`, {
            cwd: wasmModulePath,
            windowsHide: true,
            env: {
                ...process.env,
                GOOS: 'js',
                GOARCH: 'wasm'
            }
        });
    }
    PlataBuildWasm.buildGoWasmModule = buildGoWasmModule;
    function setupRuntime() {
        require('++/misc/golang/wasm_exec');
    }
    PlataBuildWasm.setupRuntime = setupRuntime;
    async function loadFilesWasm() {
        const wasmPath = node_path_1.default.join(Plata.ProjectDir, '__BUILD__', 'wasm');
        const hasGoWasmModule = await Plata.files.access(wasmPath);
        if (hasGoWasmModule !== true) {
            return true;
        }
        const files = await PlataBuildWasm.listWasmFiles(wasmPath);
        setupRuntime();
        const promises = [];
        for (let i = 0; i < files.length; i++) {
            promises.push(...files.map(f => Plata.FastPromise(() => PlataBuildWasm.loadGoWasmFile(node_path_1.default.join(wasmPath, f), f))));
        }
        await Promise.all(promises);
    }
    PlataBuildWasm.loadFilesWasm = loadFilesWasm;
    async function loadGoWasmFile(wasmFilePath, wasmName) {
        if (Plata._loadedsWasms.has(wasmName)) {
            return true;
        }
        const go = new Go();
        const fileContet = await Plata.files.fs.readFile(wasmFilePath).catch((err) => ({
            errorID: 'PLBUILDWASMLDGO0001',
            msg: 'Erro ao ler arquivo WASM',
            error: err
        }));
        if (fileContet.errorID !== undefined) {
            console.log(JSON.stringify(fileContet, null, 4));
            process.exit(1);
        }
        const resultWASM = await WebAssembly.instantiate(fileContet, go.importObject).catch(err => ({
            errorID: 'PLBUILDWASMLDGO0002',
            msg: 'Erro ao iniciar WASM',
            error: err
        }));
        if (resultWASM.errorID !== undefined) {
            console.log(JSON.stringify(resultWASM, null, 4));
            process.exit(1);
        }
        go.run(resultWASM.instance);
        for (const k in resultWASM.instance.exports) {
            if (k.startsWith('PlataWasm_')) {
                const funcName = k.replace(/PlataWasm_/g, '');
                global[funcName] = resultWASM.instance.exports[k];
            }
        }
        Plata._loadedsWasms.add(wasmName);
    }
    PlataBuildWasm.loadGoWasmFile = loadGoWasmFile;
})(PlataBuildWasm || (exports.PlataBuildWasm = PlataBuildWasm = {}));
//# sourceMappingURL=build_wasm.js.map