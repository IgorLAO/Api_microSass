"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.swagger = exports.Internals = void 0;
const swagger_ui_express_1 = __importDefault(require("swagger-ui-express"));
const node_path_1 = __importDefault(require("node:path"));
var Internals;
(function (Internals) {
    async function loadSwaggerConfig() {
        const obj = require('@@/swagger/header.json');
        obj.paths = Object.create(null);
        const swaggerFolder = node_path_1.default.join(Plata.ProjectDir, '__BUILD__', 'swagger', 'routes').replace(/\\/g, '/');
        {
            const routes = await Plata.files.FindFiles([swaggerFolder], 'header.json');
            for (const route of routes) {
                const docPath = node_path_1.default.normalize(node_path_1.default.dirname(route));
                const method = node_path_1.default.normalize(node_path_1.default.basename(docPath));
                const httpPath = node_path_1.default.normalize(node_path_1.default.dirname(docPath.replace(/\\/g, '/').replace(swaggerFolder, ''))).replace(/\\/g, '/');
                const header = require(node_path_1.default.join(docPath, 'header.json'));
                const body = require(node_path_1.default.join(docPath, 'body.json'));
                const response = require(node_path_1.default.join(docPath, 'response.json'));
                if (obj.paths[httpPath] === undefined) {
                    obj.paths[httpPath] = Object.create(null);
                }
                obj.paths[httpPath][method] = { ...header, responses: response };
                if (Object.keys(body).length !== 0) {
                    if (!Array.isArray(obj.paths[httpPath][method].parameters)) {
                        obj.paths[httpPath][method].parameters = [];
                    }
                    const swaggerRouteBody = {
                        name: "body",
                        description: body.description,
                        in: "body",
                        schema: {
                            ...body.extras,
                            type: body.type ?? "object",
                        }
                    };
                    if (swaggerRouteBody.schema.type === 'array') {
                        swaggerRouteBody.schema.items = {
                            example: body.example
                        };
                    }
                    else {
                        swaggerRouteBody.schema.properties = body.example;
                    }
                    obj.paths[httpPath][method].parameters.push(swaggerRouteBody);
                }
            }
        }
        return obj;
    }
    Internals.loadSwaggerConfig = loadSwaggerConfig;
})(Internals || (exports.Internals = Internals = {}));
const swagger = async (router) => {
    router.swaggerHide = true;
    if (Plata.config._PLATA_WORKER_NAME === '__PLATA_EXPRESS__') {
        router.use(swagger_ui_express_1.default.serve, swagger_ui_express_1.default.setup(await Internals.loadSwaggerConfig(), {}));
    }
    return router;
};
exports.swagger = swagger;
//# sourceMappingURL=swagger.js.map