"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlataClusterController = void 0;
class PlataClusterController {
    clusterManager;
    clusterName;
    msgId = 0;
    workersPids = new Set();
    constructor(clusterManager, name) {
        this.clusterManager = clusterManager;
        this.clusterName = name;
    }
    async loadWorkers() {
        const result = await new Promise(resolve => {
            const id = `${process.pid}_${this.msgId++}_GETPID`;
            const cleanUp = () => {
                process.removeListener('message', onResponse);
            };
            const onResponse = (event) => {
                if (event.action !== `GET-PIDS-CLUSTER-RESULT-${id}`)
                    return;
                cleanUp();
                const e = event;
                return resolve(e.msg);
            };
            process.on('message', onResponse);
            this.clusterManager.send({
                action: 'GET-PIDS-CLUSTER',
                msg: {
                    id,
                    name: this.clusterName
                }
            });
        });
        if (result.errorID !== undefined) {
            return result;
        }
        const pids = new Set(result);
        pids.delete(process.pid);
        this.workersPids = pids;
        return true;
    }
    getWorkersPids() {
        return [...this.workersPids];
    }
    setOnDeadWorker(handle) {
        const handleMessage = ((event) => {
            if (event.action !== 'DEAD-WORKER-NOTIFY')
                return;
            if (event.msg.clusterName !== this.clusterName)
                return;
            this.workersPids.delete(event.msg.pidDead);
            this.workersPids.add(event.msg.newPid);
            return handle(event.msg.newPid, event.msg.pidDead);
        }).bind(this);
        process.on('message', handleMessage);
    }
    async sendMsgToPID(pid, event) {
        if (!this.workersPids.has(pid))
            return {
                errorID: 'PLCLUCONTSNDPID001',
                msg: `PID ${pid} nÃ£o existe no cluster`
            };
        return this.clusterManager.sendToWorkerPid(pid, event);
    }
    async setOnMessage(handle) {
        const handleMessage = ((msg) => {
            if (msg.action === undefined)
                return;
            return handle(msg);
        }).bind(this);
        process.on('message', handleMessage);
    }
}
exports.PlataClusterController = PlataClusterController;
//# sourceMappingURL=cluster-controller.js.map