"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ModelTemplate = void 0;
const tools_1 = require("./tools");
class ModelTemplate {
    template;
    converters;
    validations;
    filters;
    type;
    constructor(template, converters) {
        this.template = template;
        this.converters = converters;
        this.validations = new Map();
        this.filters = new Map();
    }
    addValidation(nome, callback) {
        this.validations.set(nome, callback);
    }
    addFilter(nome, callback) {
        this.filters.set(nome, callback);
    }
    convert = (value, to) => {
        const c = this.converters[to];
        if (c === undefined)
            return {
                errorID: 'BPLM0002',
                msg: 'Invalid Converter',
                error: to
            };
        try {
            return c(value);
        }
        catch (e) {
            return {
                errorID: 'BPLM0003',
                msg: 'Unexpected converter error',
                error: e
            };
        }
    };
    filter(value) {
        if (!value) {
            value = {};
        }
        let v = tools_1.ModelsInternals.filterTemplate(value, this.template);
        this.filters.forEach(f => {
            v = f(v);
        });
        return v;
    }
    async validate(value, skipFilter) {
        const v = skipFilter ? value : this.filter(value);
        const errors = await tools_1.ModelsInternals.validateTemplate(v, this.template);
        if (errors.errorID !== undefined) {
            return {
                value: v,
                errors: [errors]
            };
        }
        if (errors.length !== 0) {
            return {
                value: v,
                errors
            };
        }
        const promises = [];
        this.validations.forEach(validation => {
            promises.push(validation(v));
        });
        const result = await Plata.FastPromise(() => Promise.all(promises)).then(r => [].concat(...r).filter(v => v !== null), err => {
            return {
                errorID: 'BPLM0002',
                msg: `unexpected error while validating model`,
                error: err
            };
        });
        if (result.errorID !== undefined) {
            return {
                value: v,
                errors: [result]
            };
        }
        return {
            value: v,
            errors: result.length !== 0 ? result : undefined
        };
    }
}
exports.ModelTemplate = ModelTemplate;
//# sourceMappingURL=model-template.js.map