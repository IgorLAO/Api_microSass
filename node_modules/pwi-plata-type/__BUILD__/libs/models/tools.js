"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ModelsInternals = void 0;
var ModelsInternals;
(function (ModelsInternals) {
    function hasValue(value) {
        if (value === null)
            return false;
        if (value === undefined)
            return false;
        return true;
    }
    ModelsInternals.hasValue = hasValue;
    function filterValidation(value, validations) {
        for (let i = 0; i < validations.length; i++) {
            const validation = validations[i];
            if (validation.filter !== undefined) {
                value = validation.filter(value);
            }
        }
        return value;
    }
    ModelsInternals.filterValidation = filterValidation;
    function filterTemplate(value, template) {
        for (const param in template) {
            const t = template[param];
            if (t.length === undefined) {
                if (!ModelsInternals.hasValue(value[param])) {
                    value[param] = Object.create(null);
                }
                value[param] = filterTemplate(value[param], t);
                continue;
            }
            if (typeof t[0] === 'function') {
                if (!ModelsInternals.hasValue(value[param])) {
                    value[param] = null;
                }
                value[param] = ModelsInternals.filterValidation(value[param], t);
                continue;
            }
            if (t[0].length !== undefined) {
                if (!ModelsInternals.hasValue(value[param])) {
                    value[param] = [];
                }
                if (!Array.isArray(value[param])) {
                    value[param] = [value[param]];
                }
                for (let i = 0; i < value[param].length; i++) {
                    value[param][i] = ModelsInternals.filterValidation(value[param][i], t[0]);
                }
                continue;
            }
            if (!ModelsInternals.hasValue(value[param])) {
                value[param] = [];
                continue;
            }
            if (!Array.isArray(value[param])) {
                if (typeof value[param] !== 'object') {
                    value[param] = [];
                    continue;
                }
                value[param] = [value[param]];
            }
            for (let i = 0; i < value[param].length; i++) {
                value[param][i] = filterTemplate(value[param][i], t[0]);
            }
        }
        return value;
    }
    ModelsInternals.filterTemplate = filterTemplate;
    async function validateTemplateEnv(value, template) {
        const promises = [];
        for (const env in template) {
            promises.push(Plata.FastPromise(() => validateParameter(value[env] ?? null, template[env], env)));
        }
        return Promise.all(promises).then(result => result.filter(Boolean).flatMap(r => r), err => ({
            errorID: 'BPLMINVLTMEN001',
            msg: `unexpected error while validating template for env`,
            error: err
        }));
    }
    ModelsInternals.validateTemplateEnv = validateTemplateEnv;
    async function validateParameter(value, pipeline, name) {
        for (const validation of pipeline) {
            const result = await validation(name, value);
            if (result.error !== undefined) {
                return result.error;
            }
            if (!result.continua) {
                break;
            }
        }
        return null;
    }
    ModelsInternals.validateParameter = validateParameter;
    async function validateTemplate(value, template, name) {
        const promises = [];
        for (const param in template) {
            const t = template[param];
            if (t.length === undefined) {
                promises.push(Plata.FastPromise(() => validateTemplate(value[param], t, `${name ?? ''}${param}.`)));
                continue;
            }
            if (typeof t[0] === 'function') {
                promises.push(Plata.FastPromise(() => validateParameter(value[param], t, `${name ?? ''}${param}`)));
                continue;
            }
            if (t[0].length !== undefined) {
                for (let i = 0; i < value[param].length; i++) {
                    promises.push(Plata.FastPromise(() => validateParameter(value[param][i], t[0], `${name ?? ''}${param}[${i}]`)));
                }
                continue;
            }
            for (let i = 0; i < value[param].length; i++) {
                promises.push(Plata.FastPromise(() => validateTemplate(value[param][i], t[0], `${name ?? ''}${param}[${i}].`)));
            }
        }
        return Promise.all(promises).then(result => [].concat(...result).filter(v => v !== null), err => {
            return {
                errorID: 'BPLM0001',
                msg: `unexpected error while validating template (${name})`,
                error: err
            };
        });
    }
    ModelsInternals.validateTemplate = validateTemplate;
})(ModelsInternals || (exports.ModelsInternals = ModelsInternals = {}));
//# sourceMappingURL=tools.js.map